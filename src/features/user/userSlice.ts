import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { waitForLogout, waitForUser } from '../../services';

interface User {
  name: string;
}

export interface UserState {
  value: null | User;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: UserState = {
  value: null,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const checkSession = createAsyncThunk('user/checkSession', async () => {
  const response = await waitForUser(3000);
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const logout = createAsyncThunk('user/logout', async () => {
  await waitForLogout(1000);
});

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(checkSession.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkSession.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = { ...action.payload };
      })
      .addCase(checkSession.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(logout.pending, () => {})
      .addCase(logout.fulfilled, (state) => {
        state.status = 'idle';
        state.value = null;
      })
      .addCase(logout.rejected, () => {});
  },
});

export const {} = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userSlice.reducer;
